import groovy.io.FileType

buildscript {
  repositories {
    jcenter()
  }
  dependencies {
    classpath 'org.hidetake:gradle-ssh-plugin:2.2.0'
  }
}

repositories {
  mavenCentral()
}

apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'org.hidetake.ssh'

dependencies {
  implementation 'au.com.codeka:carrot:2.4.1'
  implementation 'joda-time:joda-time:2.3'
  implementation 'com.google.api-client:google-api-client:1.23.0'
  implementation 'com.google.api-client:google-api-client-gson:1.22.0'
  implementation 'com.google.code.findbugs:jsr305:3.0.1'
  implementation 'com.google.code.gson:gson:2.8.0'
  implementation 'com.google.firebase:firebase-admin:4.1.1'
  implementation 'com.google.guava:guava:22.0'
  implementation 'com.squareup.wire:wire-gson-support:2.1.2'
  implementation 'org.simplejavamail:simple-java-mail:4.2.1'
  implementation 'org.eclipse.jetty:jetty-server:9.4.0.v20161208'
  implementation 'org.eclipse.jetty.websocket:websocket-server:9.4.0.v20161208'
  implementation 'org.xerial:sqlite-jdbc:3.16.1'
  //compile project(':carrot')
  implementation project(':common')
  implementation project(':planet-render')
}

def fixProtoPath(str) {
  def prefix = projectDir.path + "/src/main/proto/".replace("/", File.separator)
  return (str - prefix).replace(File.separator, "/")
}

task buildProto() {
  doLast {
    def protos = []
    new File(projectDir.path + "/src/main/proto").eachFileRecurse(FileType.FILES) { file ->
      protos << fixProtoPath(file.absolutePath)
    }

    javaexec {
      main = "-jar"
      args = [
         project(':common').projectDir.getAbsolutePath() + "/libs/wire-compiler-2.1.2-jar-with-dependencies.jar",
         "--proto_path=src/main/proto",
         "--proto_path=" + project(':common').projectDir.getAbsolutePath() + "/src/main/proto",
         "--named_files_only",
         "--java_out=src/main/java",
      ] + protos
    }
  }
}

compileJava.dependsOn buildProto

applicationDistribution.from("src/main/data") {
  into "data"
  exclude "store/**"
  exclude "cache/**"
}

mainClassName = "au.com.codeka.warworlds.server.Program"

ssh.settings {
  knownHosts = file('../../known_hosts')
}

remotes {
  prod {
    host = 'wwmmo.codeka.com.au'
    user = 'wwmmo'
    identity = file('../../wwmmo2.id_rsa')
  }
}

task deploy(type: Exec, dependsOn: 'installDist') {
  workingDir "${buildDir}/install/server"
  commandLine "sh", "-c", "rsync -a -e" +
      " 'ssh -o UserKnownHostsFile=${projectDir}/../../known_hosts -i ${projectDir}/../../wwmmo2.id_rsa'" +
      " . wwmmo@wwmmo.codeka.com.au:/home/wwmmo/staging"
}
